
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
</head>
<body>

<div class="explanation">
    <p>The <code>ItsNatHTMLInputTextFormatted</code> is an avanced
    version of the <code>ItsNatHTMLInputText</code> component.
    It allows a finer control of the text format including in the
    user editing phase, and can perform a custom validation of the
    user input. To create the advanced version the "formattedTextField"
    parameter can be used as the component type or calling the method
    <code>ItsNatHTMLComponentManager.createItsNatHTMLInputTextFormatted</code>.
    </p>

    <p>The architecture was inspired in the Swing counterpart,
        <code>javax.swing.JFormattedTextField</code> but there are many differences.
    </p>
    <p>As a normal text field is backed by a <code>Document</code> data model too,
        but the "content director" is a user defined Java value, this value
        is set to the component calling <code>ItsNatHTMLInputTextFormatted.setValue(Object)</code>,
        this value is rendered as text depending of the object type and registered
        formatters. The user input is converted to a Java value using the appropriated registered
        formatter failing if the format is not the expected.
    </p>
    <p>When the component value is going to be changed it can be vetoed calling registered
        <code>VetoableChangeListener</code> listeners (this example vetoes
        a future date as user input), and if it was finally set then this change is notified
        using a <code>PropertyChangeEvent</code> with the property name "value".
    </p>

</div>

</body>
</html>
