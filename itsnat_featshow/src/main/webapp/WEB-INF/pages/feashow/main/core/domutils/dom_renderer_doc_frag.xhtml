
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>

<div class="explanation">
    <p>To render a Java object as markup ItsNat uses pluggable "DOM Renderers",
        a DOM renderer is an interface with a single method designed to be called
        when a Java object must be converted in markup (usually modifying the current
        markup accordingly, this markup is frequently the layout "pattern").
    </p>
    <p>There are several DOM renderer interfaces the "independent" is
        <code>ElementRenderer</code>, other interfaces like <code>ElementLabelRenderer</code>,
        <code>ElementListRenderer</code> or <code>ElementTableRenderer</code> are specific
        to utility objects.
    </p>
    <p>ItsNat provides a default <code>ElementRenderer</code> implementation
        obtained calling <code>ElementGroupManager.createDefaultElementRenderer()</code>.
        This renderer converts to string the specified Java object calling <code>toString()</code>
        and saves this string as a text node updating the first and deepest text node with some text (not only spaces, tabs or end lines)
        found into the element submitted; if no text node is found one is created and added
        containing the string. Of course the simplest covered case is an element with a text node
        like <code>&lt;tag&gt;write here&lt;/tag&gt;</code>.
    </p>

    <p>User defined <code>ElementRenderer</code> objects can be used in <code>ItsNatButtonLabel</code> objects to render the button labels.</p>

    <h5>The <code>ItsNatTreeWalker</code> class</h5>

    <p>This example uses the <code>ItsNatTreeWalker</code> utility class,
        this class is similar to the standard DOM <code>org.w3c.dom.traversal.TreeWalker</code>
        interface but the ItsNat version has not state (is not a "cursor") and is oriented mainly to
        traverse DOM Elements.
    </p>

    <p>Another DOM utility class is <code>ItsNatDOMUtil</code>, this class has
        very interesting methods like <code>getTextContent</code> and <code>setTextContent</code>
        used to get/set the string contained in a DOM element as the only child node.
    </p>
</div>

</body>
</html>
