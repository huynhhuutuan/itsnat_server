
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
</head>
<body>

<div class="explanation">

    <p>The <code>ElementTree</code> utility interface constructs
        a DOM element tree using a similar pattern approach to labels, lists and tables.
        An <code>ElementTree</code> object is created calling
        an <code>ElementGroupManager.createElementTree</code> method and attached to a DOM
        element parent of the table.
    </p>
    <p>
        The tree "unit" is the tree node, a tree node is a subtree containing:
    </p>
    <ul>
        <li>A handler: for instance &nbsp; <img style="vertical-align:middle;" src="img/tree/tree_node_collapse.gif"/> </li>
        <li>An icon: for instance &nbsp; <img src="img/tree/tree_folder_open.gif" style="vertical-align:middle;" /> or <img style="vertical-align:middle;" src="img/tree/gear.gif" /> </li>
        <li>A label (usually text)</li>
        <li>Child tree nodes</li>
    </ul>

    <p>By default the handler and icon parts are optional and they are ignored if not present in the pattern.</p>

    <p>The original markup of the subtree being associated to the <code>ElementTree</code>
        must contain almost one tree node, this tree node will be the tree node pattern and will be saved internally by the
        tree and used to create new tree nodes. The interface <code>ElementTreeNode</code>
        represents a tree node, the method <code>ElementTreeNode.getChildTreeNodeList()</code> returns
        an <code>ElementTreeNodeList</code>, this object represents the direct
        node children and used to create new child nodes.
    </p>

    <p>A Java data object can be rendered as markup inside a tree node (usually as a text label) using a
        <code>ElementTreeNodeRenderer</code> if provided (otherwise the default is used).
        The label element provided to render the data object as markup is the label element
        of the tree node following the default structure, this structure can change using
        a user defined <code>ElementTreeNodeStructure</code> object.
    </p>

    <h5>Tree with a fixed root (non-removable)</h5>

    <p>An <code>ElementTreeNode</code> object can be associated to a markup tree node
       directly calling <code>ElementGroupManager.createElementTreeNode</code>,
       this root node is not removable.
    </p>

    <h5>Rootless tree</h5>

    <p>An <code>ElementTreeNodeList</code> object can be associated to a markup tree node list
        directly calling <code>ElementGroupManager.createElementTreeNodeList</code>.
    </p>

    <h5>Tree-Table</h5>

    <p>Using the <code>treeTable</code> parameter of the <code>ElementGroupManager.createElementTree</code>
    method we can create a tree-table, the tree table API is the same as a normal
    API but the layout is different. In a tree-table tree nodes are organized as a list
    following the tree order, this list is usually managed by an HTML table.
    The tree hierarchy is not lost, for instance when a tree node is removed the child nodes and automatically removed too.
    </p>

</div>

</body>
</html>
