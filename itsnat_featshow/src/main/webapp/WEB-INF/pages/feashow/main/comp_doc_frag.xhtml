
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
</head>
<body>

<div class="explanation">

    <p>ItsNat core is enough to build event based web applications, but if we talk
        about events we are nearer to the desktop paradigm, then
        a component system fits perfectly well in this scenario, furthermore
        a component system without events is interesting though is a strange
        artifact (consequence of the old and poor web paradigm).
    </p>
    <p>ItsNat component system:</p>
    <ul>
        <li>Is fully based on events (AJAX or SCRIPT)</li>
        <br />
        <li>Many components are namespace and tag agnostic,
            <b>every DOM element group can be a component</b> including
            events (for instance a list of SVG circles).
        </li>
        <br />
        <li><b>Reuses Swing as far as possible</b> including data models, selection models and related listeners,
            in fact the architecture is similar to Swing MVC,
            but is <b>not forced</b>, ItsNat components are not a web clone of Swing
            and are not "pixel based".
        </li>
        <br />
        <li>Pattern based: <b>the markup is not imposed by the component</b>,
            ItsNat components leverages the pattern based DOM utilities (ElementList etc)
            as components (with events, data models and selection models).
        </li>
        <br />
        <li>Extensible: components offer many extension points as model listeners, selection
            listeners, renderers and structures.
        </li>
        <br />
        <li>Building user defined components amazingly easy, for instance custom components
            build as compound components.
        </li>
    </ul>
    <p>All ItsNat components implement the <code>ItsNatComponent</code>
        and implementations provided by ItsNat are obtained with specific
        <code>ItsNatComponentManager.create<i>X<i></code> and
        <code>ItsNatHTMLComponentManager.create<i>X<i></code> methods.
    </p>
    <p>Components uses internal DOM event/listeners to do the
        expected task, the user can add listeners to be notified when a DOM
        event is received by the component registering them with the method
        <code>ItsNatComponent.addEventListener</code>. This notification is <i>complementary</i>
        to the usual Swing based listener system of models.
    </p>
    <p>When a component is no longer be used is recommended to call the
        method <code>ItsNatComponent.dispose()</code> to remove listener disconnect
        listeners of data and selection models etc. A disposed component can not
        be reused.
    </p>
    <p>There are several ways to create components such as:
    <ul>
        <li><code>ItsNatComponentManager.createItsNatComponent</code> or
            <code>ItsNatComponentManager.createItsNatComponentById</code>
            methods: the concrete component is obtained as the most appropriated
            component to specified node specified or using the optional <code>compType</code>
            component type (free components). The artifacts may be used
            to specify initial objects like custom structures.
        </li>
        <br/>
        <li>Concrete factory methods as <code>ItsNatHTMLComponentManager.createItsNatHTML<i>CompName</i></code>
            methods.
        </li>
        <li>Using the automatic build from the markup calling <code>ItsNatComponentManager.buildItsNatComponents(Node)</code>,
            the necessary data must be in the markup.
        </li>
    </ul>

</div>

</body>
</html>
